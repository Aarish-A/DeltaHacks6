{"version":3,"sources":["MapContainer.js","App.js","serviceWorker.js","index.js"],"names":["MapContainer","props","displayMarkers","accidentList","map","accidents","index","key","id","position","lat","lng","description","name","onClick","evt","console","log","icon","url","scaledSize","google","maps","Size","state","activeMarker","selectedPlace","markers","this","editing","onMapClicked","zoom","initialCenter","React","Component","GoogleApiWrapper","apiKey","styles","width","App","className","style","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4RAKaA,EAAb,YACI,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAgBVC,eAAiB,SAACD,GACd,OAAO,EAAKA,MAAME,aAAaC,KAAI,SAACC,EAAWC,GAK3C,OACI,kBAAC,SAAD,CACIC,IAAKD,EACLE,GAAIF,EACJG,SAAU,CAAEC,IAAKL,EAAUK,IAAKC,IAAKN,EAAUM,KAC/CC,YAAaP,EAAUQ,KACvBC,QAVc,SAACC,GACnBC,QAAQC,IAAI,IAURC,KAAM,CAAEC,IAAK,kCAAmCC,WAAY,IAAI,EAAKnB,MAAMoB,OAAOC,KAAKC,KAAK,GAAI,WA5B5G,EAAKC,MAAQ,CACTC,aAAc,GACdC,cAAe,GACfC,QAAS,CACL,CACId,KAAM,mBACNJ,SAAU,CACNC,IAAK,QACLC,KAAM,aAVP,EADvB,sEAqCc,IAAD,EAC6BiB,KAAK3B,MAAtBE,GADZ,EACG0B,QADH,EACY1B,cACjB,OACI,kBAAC,MAAD,CACIW,QAASc,KAAKE,aACdC,KAAM,GACNC,cAAe,CACXtB,IAAKP,EAAa,GAAGO,IACrBC,IAAKR,EAAa,GAAGQ,KAEzBU,OAAQO,KAAK3B,MAAMoB,QAElBO,KAAK1B,sBAjDtB,GAAkC+B,IAAMC,WAsDzBC,6BAAiB,CAC5BC,OAAQ,2CADGD,CAEZnC,GCxDGqC,G,MAAS,CACbC,MAAO,QAWMC,MARf,WACE,OACE,yBAAKC,UAAU,MAAMC,MAAOJ,GAC1B,kBAAC,EAAD,CAAclC,aAAc,CAAC,CAAEO,IAAK,QAASC,KAAM,QAASE,KAAM,wBAA0B,CAAEH,IAAK,GAAIC,IAAK,GAAIE,KAAM,6BCAxG6B,QACW,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZJC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.139c9b3a.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Map, GoogleApiWrapper, Marker, InfoWindow } from 'google-maps-react';\r\nimport { GOOGLE_MAPS_API_KEY } from './variables.js';\r\n\r\nexport class MapContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            activeMarker: {},\r\n            selectedPlace: {},\r\n            markers: [\r\n                {\r\n                    name: \"Initial position\",\r\n                    position: {\r\n                        lat: 47.6062,\r\n                        lng: -122.3321\r\n                    }\r\n                }\r\n            ],\r\n        };\r\n    }\r\n\r\n    displayMarkers = (props) => {\r\n        return this.props.accidentList.map((accidents, index) => {\r\n            const onMarkerClick = (evt) => {\r\n                console.log(1);\r\n            };\r\n\r\n            return (\r\n                <Marker\r\n                    key={index}\r\n                    id={index}\r\n                    position={{ lat: accidents.lat, lng: accidents.lng }}\r\n                    description={accidents.name}\r\n                    onClick={onMarkerClick}\r\n                    icon={{ url: 'https://i.imgur.com/bpAojnM.png', scaledSize: new this.props.google.maps.Size(60, 60) }}\r\n                />\r\n            );\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { editing, accidentList } = this.props;\r\n        return (\r\n            <Map\r\n                onClick={this.onMapClicked}\r\n                zoom={14}\r\n                initialCenter={{\r\n                    lat: accidentList[0].lat,\r\n                    lng: accidentList[0].lng\r\n                }}\r\n                google={this.props.google}\r\n            >\r\n                {this.displayMarkers()}\r\n            </Map>\r\n        );\r\n    }\r\n}\r\nexport default GoogleApiWrapper({\r\n    apiKey: 'AIzaSyDUx9sscMv5qGQCY4XGgGLqAlTld4qXElY'\r\n})(MapContainer);","import React from 'react';\r\nimport './App.css';\r\nimport MapContainer from './MapContainer.js';\r\nimport boostrap from 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst styles = {\r\n  width: '50%'\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\" style={styles}>\r\n      <MapContainer accidentList={[{ lat: 43.2557, lng: -79.8711, name: \"Hamilton Car Crash 1\" }, { lat: 45, lng: 35, name: \"Hamilton Car Crash 2\" }]} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.0/8 are considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}